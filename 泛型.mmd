Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# 泛型
- NOTE
<pre>https://www.jianshu.com/p/986f732ed2f1

泛型，即“参数化类型”。就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，
此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。
使用泛型的意义在于
1,适用于多种数据类型执行相同的代码（代码复用）
2, 泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）。
一句话：泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，
以提高代码的重用率。</pre>

## 泛型的定义以及存在意义
- NOTE
<pre>泛型，即“参数化类型”。就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，
此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。
例如：GenericClass&lt;T&gt;{}
一些常用的泛型类型变量：
E：元素（Element），多用于java集合框架
K：关键字（Key）
N：数字（Number）
T：类型（Type）
V：值（Value）

使用泛型的意义在于
1、适用于多种数据类型执行相同的代码（代码复用）
2、泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）
</pre>

## 泛型类的使用
> leftSide=`true`

- NOTE
<pre>GenericClass&lt;T&gt;</pre>

## 泛型接口的使用
> leftSide=`true`

- NOTE
<pre>GenericIntercace&lt;T&gt;</pre>

## 泛型方法的使用
- NOTE
<pre>GenericMethod</pre>

## 限定泛型类型变量
> leftSide=`true`

- NOTE
<pre>1、对类的限定：public class TypeLimitForClass&lt;T extends List &amp; Serializable&gt;{}
2、对方法的限定：public static&lt;T extends Comparable&lt;T&gt;&gt;T getMin(T a, T b) {}</pre>

## 泛型中的约束和局限性
- NOTE
<pre>1、不能实例化泛型类
2、静态变量或方法不能引用泛型类型变量，但是静态泛型方法是可以的
3、基本类型无法作为泛型类型
4、无法使用instanceof关键字或==判断泛型类的类型
5、泛型类的原生类型与所传递的泛型无关，无论传递什么类型，原生类是一样的
6、泛型数组可以声明但无法实例化
7、泛型类不能继承Exception或者Throwable
8、不能捕获泛型类型限定的异常但可以将泛型限定的异常抛出</pre>

## 泛型类型继承规则
> leftSide=`true`

- NOTE
<pre>1、泛型参数是继承关系的泛型类之间是没有继承关系的
2、泛型类可以继承其它泛型类，例如: public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;
3、泛型类的继承关系在使用中同样会受到泛型类型的影响
GenericInherit</pre>

## 通配符类型
- NOTE
<pre>1、&lt;? extends Parent&gt; 指定了泛型类型的上界
2、&lt;? super Child&gt; 指定了泛型类型的下界
3、 &lt;?&gt; 指定了没有限制的泛型类型
GenericByWildcard</pre>

## 获取泛型的参数类型
> leftSide=`true`

- NOTE
<pre>这里的Type指java.lang.reflect.Type, 是Java中所有类型的公共高级接口, 代表了Java中的所有类型. 
Type体系中类型的包括：数组类型(GenericArrayType)、参数化类型(ParameterizedType)、
类型变量(TypeVariable)、通配符类型(WildcardType)、原始类型(Class)、基本类型(Class), 
以上这些类型都实现Type接口.
参数化类型,就是我们平常所用到的泛型List、Map；
数组类型,并不是我们工作中所使用的数组String[] 、byte[]，而是带有泛型的数组，即T[] ；
通配符类型, 指的是&lt;?&gt;, &lt;? extends T&gt;等等
原始类型, 不仅仅包含我们平常所指的类，还包括枚举、数组、注解等；
基本类型, 也就是我们所说的java的基本类型，即int,float,double等

GenericType</pre>

## 类型擦除
- NOTE
<pre>https://blog.csdn.net/briblue/article/details/76736356
泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，
泛型在运行期是不可见的，专业术语叫做类型擦除。
通俗地讲，泛型类和普通类在 java 虚拟机内是没有什么特别的地方。

当类定义中的类型参数没有任何限制时，在类型擦除中直接被替换为Object，
即形如&lt;T&gt;和&lt;?&gt;的类型参数都被替换为Object。

当类定义中的类型参数存在限制（上下界）时，在类型擦除中替换为类型参数的上界或者下界，比如
形如&lt;T extends Number&gt;和&lt;? extends Number&gt;的类型参数被替换为Number，
&lt;? super Number&gt;被替换为Object。

Java 泛型擦除是 Java 泛型中的一个重要特性，其目的是避免过多的创建类而造成的运行时的过度消耗。
所以，想 ArrayList&lt;Integer&gt; 和 ArrayList&lt;String&gt; 这两个实例，其类实例是同一个。</pre>
