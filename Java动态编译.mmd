Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Java动态编译
- NOTE
<pre>https://www.cnblogs.com/throwable/p/13053582.html</pre>

## 基本原理
- NOTE
<pre>实际上，仅仅对于编译这个过程来说，开发者或者使用者不必要完全掌握其中的细节，JDK提供了一个
工具包javax.tools让使用者可以用简易的API进行编译（其实在大多数请下，开发者是面向业务功能开发
，像编译和打包这些细节一般直接由开发工具、Maven、Gradle等工具完成）。

具体的使用过程包括：
获取一个javax.tools.JavaCompiler实例。
基于Java文件对象初始化一个编译任务javax.tools.JavaCompiler$CompilationTask实例。
CompilationTask实例执行结果代表着编译过程的成功与否。
我们熟知的javac编译器其实就是JavaCompiler接口的实现，在JDK11中，对应的实现类为
com.sun.tools.javac.api.JavacTool。在JDK8中不存在JavaCompiler接口，具体的编译入口类为
com.sun.tools.javac.main.JavaCompiler。
因为JVM里面的Class是基于ClassLoader隔离的，所以编译成功之后可以通过自定义的类加载器加载
对应的类实例，然后就可以应用反射API进行实例化和后续的调用。</pre>

## JDK动态编译
> leftSide=`true`


## Javassist动态编译
> leftSide=`true`

- NOTE
<pre>既然有JDK的动态编译，为什么还存在Javassist这样的字节码增强工具？撇开性能或者效率层面，
JDK动态编译存在比较大的局限性，比较明显的一点就是无法完成字节码插桩，换言之就是无法基于
原有的类和方法进行修饰或者增强，但是Javassist可以做到。再者，Javassist提供的API和JDK反射的
API十分相近，如果反射平时用得比较熟练，Javassist的上手也就变得比较简单。</pre>
